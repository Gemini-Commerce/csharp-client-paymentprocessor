/*
 * Payment Processor Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = paymentprocessor.Client.OpenAPIDateConverter;

namespace paymentprocessor.Model
{
    /// <summary>
    /// PaymentprocessorTransaction
    /// </summary>
    [DataContract(Name = "paymentprocessorTransaction")]
    public partial class PaymentprocessorTransaction : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public PaymentprocessorTransactionType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentprocessorTransaction()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorTransaction" /> class.
        /// </summary>
        /// <param name="paymentId">paymentId (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="type">type.</param>
        /// <param name="additionalInfo">additionalInfo.</param>
        /// <param name="childTransactions">childTransactions.</param>
        public PaymentprocessorTransaction(string paymentId = default(string), string id = default(string), PaymentprocessorTransactionType? type = default(PaymentprocessorTransactionType?), string additionalInfo = default(string), List<PaymentprocessorTransaction> childTransactions = default(List<PaymentprocessorTransaction>))
        {
            // to ensure "paymentId" is required (not null)
            if (paymentId == null)
            {
                throw new ArgumentNullException("paymentId is a required property for PaymentprocessorTransaction and cannot be null");
            }
            this.PaymentId = paymentId;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PaymentprocessorTransaction and cannot be null");
            }
            this.Id = id;
            this.Type = type;
            this.AdditionalInfo = additionalInfo;
            this.ChildTransactions = childTransactions;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "paymentId", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name = "additionalInfo", EmitDefaultValue = false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Gets or Sets ChildTransactions
        /// </summary>
        [DataMember(Name = "childTransactions", EmitDefaultValue = false)]
        public List<PaymentprocessorTransaction> ChildTransactions { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentprocessorTransaction {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  ChildTransactions: ").Append(ChildTransactions).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
