/*
 * Payment Processor Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = paymentprocessor.Client.OpenAPIDateConverter;

namespace paymentprocessor.Model
{
    /// <summary>
    /// Defines paymentprocessorTransactionType
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum PaymentprocessorTransactionType
    {
        /// <summary>
        /// Enum UNKNOWN for value: UNKNOWN
        /// </summary>
        [EnumMember(Value = "UNKNOWN")]
        UNKNOWN,

        /// <summary>
        /// Enum AUTHORIZATION for value: AUTHORIZATION
        /// </summary>
        [EnumMember(Value = "AUTHORIZATION")]
        AUTHORIZATION,

        /// <summary>
        /// Enum CAPTURE for value: CAPTURE
        /// </summary>
        [EnumMember(Value = "CAPTURE")]
        CAPTURE,

        /// <summary>
        /// Enum SALE for value: SALE
        /// </summary>
        [EnumMember(Value = "SALE")]
        SALE,

        /// <summary>
        /// Enum REFUND for value: REFUND
        /// </summary>
        [EnumMember(Value = "REFUND")]
        REFUND,

        /// <summary>
        /// Enum VOID for value: VOID
        /// </summary>
        [EnumMember(Value = "VOID")]
        VOID,

        /// <summary>
        /// Enum FAILED for value: FAILED
        /// </summary>
        [EnumMember(Value = "FAILED")]
        FAILED,

        /// <summary>
        /// Enum PENDING for value: PENDING
        /// </summary>
        [EnumMember(Value = "PENDING")]
        PENDING,

        /// <summary>
        /// Enum FRAUD for value: FRAUD
        /// </summary>
        [EnumMember(Value = "FRAUD")]
        FRAUD
    }

}
