/*
 * Payment Processor Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using paymentprocessor.Client;
using paymentprocessor.Client.Auth;
using paymentprocessor.Model;

namespace paymentprocessor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentprocessorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authorize Payment
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorAuthorizePaymentResponse</returns>
        PaymentprocessorAuthorizePaymentResponse AuthorizePayment(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0);

        /// <summary>
        /// Authorize Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorAuthorizePaymentResponse</returns>
        ApiResponse<PaymentprocessorAuthorizePaymentResponse> AuthorizePaymentWithHttpInfo(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        PaymentprocessorPaymentMethod CreatePaymentMethod(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        ApiResponse<PaymentprocessorPaymentMethod> CreatePaymentMethodWithHttpInfo(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0);
        /// <summary>
        /// Finalize Payment
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorFinalizePaymentResponse</returns>
        PaymentprocessorFinalizePaymentResponse FinalizePayment(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0);

        /// <summary>
        /// Finalize Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorFinalizePaymentResponse</returns>
        ApiResponse<PaymentprocessorFinalizePaymentResponse> FinalizePaymentWithHttpInfo(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Available Payment Method
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        PaymentprocessorPaymentMethod GetAvailablePaymentMethod(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Available Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        ApiResponse<PaymentprocessorPaymentMethod> GetAvailablePaymentMethodWithHttpInfo(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        PaymentprocessorPaymentMethod GetPaymentMethod(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        ApiResponse<PaymentprocessorPaymentMethod> GetPaymentMethodWithHttpInfo(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Payment Method Configuration
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorGetPaymentMethodConfigurationResponse</returns>
        PaymentprocessorGetPaymentMethodConfigurationResponse GetPaymentMethodConfiguration(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Payment Method Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorGetPaymentMethodConfigurationResponse</returns>
        ApiResponse<PaymentprocessorGetPaymentMethodConfigurationResponse> GetPaymentMethodConfigurationWithHttpInfo(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0);
        /// <summary>
        /// Init Payment
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorInitPaymentResponse</returns>
        PaymentprocessorInitPaymentResponse InitPayment(PaymentprocessorInitPaymentRequest body, int operationIndex = 0);

        /// <summary>
        /// Init Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorInitPaymentResponse</returns>
        ApiResponse<PaymentprocessorInitPaymentResponse> InitPaymentWithHttpInfo(PaymentprocessorInitPaymentRequest body, int operationIndex = 0);
        /// <summary>
        /// List Available Payment Methods
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorListAvailablePaymentMethodsResponse</returns>
        PaymentprocessorListAvailablePaymentMethodsResponse ListAvailablePaymentMethods(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Available Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorListAvailablePaymentMethodsResponse</returns>
        ApiResponse<PaymentprocessorListAvailablePaymentMethodsResponse> ListAvailablePaymentMethodsWithHttpInfo(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0);
        /// <summary>
        /// List Payment Methods
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorListPaymentMethodsResponse</returns>
        PaymentprocessorListPaymentMethodsResponse ListPaymentMethods(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorListPaymentMethodsResponse</returns>
        ApiResponse<PaymentprocessorListPaymentMethodsResponse> ListPaymentMethodsWithHttpInfo(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0);
        /// <summary>
        /// Perform Payment
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPerformPaymentResponse</returns>
        PaymentprocessorPerformPaymentResponse PerformPayment(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0);

        /// <summary>
        /// Perform Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPerformPaymentResponse</returns>
        ApiResponse<PaymentprocessorPerformPaymentResponse> PerformPaymentWithHttpInfo(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0);
        /// <summary>
        /// Perform Refund
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PerformRefund(PaymentprocessorPerformRefundRequest body, int operationIndex = 0);

        /// <summary>
        /// Perform Refund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PerformRefundWithHttpInfo(PaymentprocessorPerformRefundRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Payment
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UpdatePayment(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdatePaymentWithHttpInfo(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        PaymentprocessorPaymentMethod UpdatePaymentMethod(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        ApiResponse<PaymentprocessorPaymentMethod> UpdatePaymentMethodWithHttpInfo(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0);
        /// <summary>
        /// Void Payment
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorVoidPaymentResponse</returns>
        PaymentprocessorVoidPaymentResponse VoidPayment(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0);

        /// <summary>
        /// Void Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorVoidPaymentResponse</returns>
        ApiResponse<PaymentprocessorVoidPaymentResponse> VoidPaymentWithHttpInfo(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentprocessorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Authorize Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorAuthorizePaymentResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorAuthorizePaymentResponse> AuthorizePaymentAsync(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authorize Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorAuthorizePaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorAuthorizePaymentResponse>> AuthorizePaymentWithHttpInfoAsync(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> CreatePaymentMethodAsync(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorPaymentMethod>> CreatePaymentMethodWithHttpInfoAsync(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Finalize Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorFinalizePaymentResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorFinalizePaymentResponse> FinalizePaymentAsync(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finalize Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorFinalizePaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorFinalizePaymentResponse>> FinalizePaymentWithHttpInfoAsync(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Available Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> GetAvailablePaymentMethodAsync(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Available Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorPaymentMethod>> GetAvailablePaymentMethodWithHttpInfoAsync(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> GetPaymentMethodAsync(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorPaymentMethod>> GetPaymentMethodWithHttpInfoAsync(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment Method Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorGetPaymentMethodConfigurationResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorGetPaymentMethodConfigurationResponse> GetPaymentMethodConfigurationAsync(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment Method Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorGetPaymentMethodConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorGetPaymentMethodConfigurationResponse>> GetPaymentMethodConfigurationWithHttpInfoAsync(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Init Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorInitPaymentResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorInitPaymentResponse> InitPaymentAsync(PaymentprocessorInitPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Init Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorInitPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorInitPaymentResponse>> InitPaymentWithHttpInfoAsync(PaymentprocessorInitPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Available Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorListAvailablePaymentMethodsResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorListAvailablePaymentMethodsResponse> ListAvailablePaymentMethodsAsync(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Available Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorListAvailablePaymentMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorListAvailablePaymentMethodsResponse>> ListAvailablePaymentMethodsWithHttpInfoAsync(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorListPaymentMethodsResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorListPaymentMethodsResponse> ListPaymentMethodsAsync(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorListPaymentMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorListPaymentMethodsResponse>> ListPaymentMethodsWithHttpInfoAsync(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Perform Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPerformPaymentResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorPerformPaymentResponse> PerformPaymentAsync(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Perform Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPerformPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorPerformPaymentResponse>> PerformPaymentWithHttpInfoAsync(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Perform Refund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PerformRefundAsync(PaymentprocessorPerformRefundRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Perform Refund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PerformRefundWithHttpInfoAsync(PaymentprocessorPerformRefundRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdatePaymentAsync(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePaymentWithHttpInfoAsync(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> UpdatePaymentMethodAsync(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorPaymentMethod>> UpdatePaymentMethodWithHttpInfoAsync(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Void Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorVoidPaymentResponse</returns>
        System.Threading.Tasks.Task<PaymentprocessorVoidPaymentResponse> VoidPaymentAsync(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Void Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorVoidPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentprocessorVoidPaymentResponse>> VoidPaymentWithHttpInfoAsync(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentprocessorApi : IPaymentprocessorApiSync, IPaymentprocessorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentprocessorApi : IPaymentprocessorApi
    {
        private paymentprocessor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentprocessorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentprocessorApi(string basePath)
        {
            this.Configuration = paymentprocessor.Client.Configuration.MergeConfigurations(
                paymentprocessor.Client.GlobalConfiguration.Instance,
                new paymentprocessor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new paymentprocessor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new paymentprocessor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = paymentprocessor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentprocessorApi(paymentprocessor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = paymentprocessor.Client.Configuration.MergeConfigurations(
                paymentprocessor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new paymentprocessor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new paymentprocessor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = paymentprocessor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentprocessorApi(paymentprocessor.Client.ISynchronousClient client, paymentprocessor.Client.IAsynchronousClient asyncClient, paymentprocessor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = paymentprocessor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public paymentprocessor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public paymentprocessor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public paymentprocessor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public paymentprocessor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Authorize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorAuthorizePaymentResponse</returns>
        public PaymentprocessorAuthorizePaymentResponse AuthorizePayment(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorAuthorizePaymentResponse> localVarResponse = AuthorizePaymentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorAuthorizePaymentResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorAuthorizePaymentResponse> AuthorizePaymentWithHttpInfo(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->AuthorizePayment");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.AuthorizePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorAuthorizePaymentResponse>("/paymentprocessor.Paymentprocessor/AuthorizePayment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorAuthorizePaymentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorAuthorizePaymentResponse> AuthorizePaymentAsync(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorAuthorizePaymentResponse> localVarResponse = await AuthorizePaymentWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorAuthorizePaymentResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorAuthorizePaymentResponse>> AuthorizePaymentWithHttpInfoAsync(PaymentprocessorAuthorizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->AuthorizePayment");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.AuthorizePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorAuthorizePaymentResponse>("/paymentprocessor.Paymentprocessor/AuthorizePayment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        public PaymentprocessorPaymentMethod CreatePaymentMethod(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = CreatePaymentMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> CreatePaymentMethodWithHttpInfo(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->CreatePaymentMethod");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.CreatePaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/CreatePaymentMethod", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> CreatePaymentMethodAsync(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = await CreatePaymentMethodWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod>> CreatePaymentMethodWithHttpInfoAsync(PaymentprocessorCreatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->CreatePaymentMethod");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.CreatePaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/CreatePaymentMethod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finalize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorFinalizePaymentResponse</returns>
        public PaymentprocessorFinalizePaymentResponse FinalizePayment(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorFinalizePaymentResponse> localVarResponse = FinalizePaymentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finalize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorFinalizePaymentResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorFinalizePaymentResponse> FinalizePaymentWithHttpInfo(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->FinalizePayment");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.FinalizePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorFinalizePaymentResponse>("/paymentprocessor.Paymentprocessor/FinalizePayment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinalizePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finalize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorFinalizePaymentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorFinalizePaymentResponse> FinalizePaymentAsync(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorFinalizePaymentResponse> localVarResponse = await FinalizePaymentWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finalize Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorFinalizePaymentResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorFinalizePaymentResponse>> FinalizePaymentWithHttpInfoAsync(PaymentprocessorFinalizePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->FinalizePayment");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.FinalizePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorFinalizePaymentResponse>("/paymentprocessor.Paymentprocessor/FinalizePayment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinalizePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Available Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        public PaymentprocessorPaymentMethod GetAvailablePaymentMethod(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = GetAvailablePaymentMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Available Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> GetAvailablePaymentMethodWithHttpInfo(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->GetAvailablePaymentMethod");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.GetAvailablePaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/GetAvailablePaymentMethod", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailablePaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Available Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> GetAvailablePaymentMethodAsync(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = await GetAvailablePaymentMethodWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Available Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod>> GetAvailablePaymentMethodWithHttpInfoAsync(PaymentprocessorGetAvailablePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->GetAvailablePaymentMethod");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.GetAvailablePaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/GetAvailablePaymentMethod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailablePaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        public PaymentprocessorPaymentMethod GetPaymentMethod(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = GetPaymentMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> GetPaymentMethodWithHttpInfo(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->GetPaymentMethod");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.GetPaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/GetPaymentMethod", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> GetPaymentMethodAsync(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = await GetPaymentMethodWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod>> GetPaymentMethodWithHttpInfoAsync(PaymentprocessorGetPaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->GetPaymentMethod");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.GetPaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/GetPaymentMethod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Method Configuration 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorGetPaymentMethodConfigurationResponse</returns>
        public PaymentprocessorGetPaymentMethodConfigurationResponse GetPaymentMethodConfiguration(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorGetPaymentMethodConfigurationResponse> localVarResponse = GetPaymentMethodConfigurationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Method Configuration 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorGetPaymentMethodConfigurationResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorGetPaymentMethodConfigurationResponse> GetPaymentMethodConfigurationWithHttpInfo(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->GetPaymentMethodConfiguration");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.GetPaymentMethodConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorGetPaymentMethodConfigurationResponse>("/paymentprocessor.Paymentprocessor/GetPaymentMethodConfiguration", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentMethodConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Method Configuration 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorGetPaymentMethodConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorGetPaymentMethodConfigurationResponse> GetPaymentMethodConfigurationAsync(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorGetPaymentMethodConfigurationResponse> localVarResponse = await GetPaymentMethodConfigurationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Method Configuration 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorGetPaymentMethodConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorGetPaymentMethodConfigurationResponse>> GetPaymentMethodConfigurationWithHttpInfoAsync(PaymentprocessorGetPaymentMethodConfigurationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->GetPaymentMethodConfiguration");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.GetPaymentMethodConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorGetPaymentMethodConfigurationResponse>("/paymentprocessor.Paymentprocessor/GetPaymentMethodConfiguration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentMethodConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Init Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorInitPaymentResponse</returns>
        public PaymentprocessorInitPaymentResponse InitPayment(PaymentprocessorInitPaymentRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorInitPaymentResponse> localVarResponse = InitPaymentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Init Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorInitPaymentResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorInitPaymentResponse> InitPaymentWithHttpInfo(PaymentprocessorInitPaymentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->InitPayment");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.InitPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorInitPaymentResponse>("/paymentprocessor.Paymentprocessor/InitPayment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Init Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorInitPaymentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorInitPaymentResponse> InitPaymentAsync(PaymentprocessorInitPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorInitPaymentResponse> localVarResponse = await InitPaymentWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Init Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorInitPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorInitPaymentResponse>> InitPaymentWithHttpInfoAsync(PaymentprocessorInitPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->InitPayment");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.InitPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorInitPaymentResponse>("/paymentprocessor.Paymentprocessor/InitPayment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Available Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorListAvailablePaymentMethodsResponse</returns>
        public PaymentprocessorListAvailablePaymentMethodsResponse ListAvailablePaymentMethods(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorListAvailablePaymentMethodsResponse> localVarResponse = ListAvailablePaymentMethodsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Available Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorListAvailablePaymentMethodsResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorListAvailablePaymentMethodsResponse> ListAvailablePaymentMethodsWithHttpInfo(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->ListAvailablePaymentMethods");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.ListAvailablePaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorListAvailablePaymentMethodsResponse>("/paymentprocessor.Paymentprocessor/ListAvailablePaymentMethods", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailablePaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Available Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorListAvailablePaymentMethodsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorListAvailablePaymentMethodsResponse> ListAvailablePaymentMethodsAsync(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorListAvailablePaymentMethodsResponse> localVarResponse = await ListAvailablePaymentMethodsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Available Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorListAvailablePaymentMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorListAvailablePaymentMethodsResponse>> ListAvailablePaymentMethodsWithHttpInfoAsync(PaymentprocessorListAvailablePaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->ListAvailablePaymentMethods");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.ListAvailablePaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorListAvailablePaymentMethodsResponse>("/paymentprocessor.Paymentprocessor/ListAvailablePaymentMethods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailablePaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorListPaymentMethodsResponse</returns>
        public PaymentprocessorListPaymentMethodsResponse ListPaymentMethods(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorListPaymentMethodsResponse> localVarResponse = ListPaymentMethodsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorListPaymentMethodsResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorListPaymentMethodsResponse> ListPaymentMethodsWithHttpInfo(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->ListPaymentMethods");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.ListPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorListPaymentMethodsResponse>("/paymentprocessor.Paymentprocessor/ListPaymentMethods", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorListPaymentMethodsResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorListPaymentMethodsResponse> ListPaymentMethodsAsync(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorListPaymentMethodsResponse> localVarResponse = await ListPaymentMethodsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Payment Methods 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorListPaymentMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorListPaymentMethodsResponse>> ListPaymentMethodsWithHttpInfoAsync(PaymentprocessorListPaymentMethodsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->ListPaymentMethods");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.ListPaymentMethods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorListPaymentMethodsResponse>("/paymentprocessor.Paymentprocessor/ListPaymentMethods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPaymentMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPerformPaymentResponse</returns>
        public PaymentprocessorPerformPaymentResponse PerformPayment(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPerformPaymentResponse> localVarResponse = PerformPaymentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPerformPaymentResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorPerformPaymentResponse> PerformPaymentWithHttpInfo(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->PerformPayment");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.PerformPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorPerformPaymentResponse>("/paymentprocessor.Paymentprocessor/PerformPayment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPerformPaymentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorPerformPaymentResponse> PerformPaymentAsync(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPerformPaymentResponse> localVarResponse = await PerformPaymentWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPerformPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorPerformPaymentResponse>> PerformPaymentWithHttpInfoAsync(PaymentprocessorPerformPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->PerformPayment");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.PerformPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorPerformPaymentResponse>("/paymentprocessor.Paymentprocessor/PerformPayment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform Refund 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PerformRefund(PaymentprocessorPerformRefundRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<Object> localVarResponse = PerformRefundWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Refund 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public paymentprocessor.Client.ApiResponse<Object> PerformRefundWithHttpInfo(PaymentprocessorPerformRefundRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->PerformRefund");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.PerformRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/paymentprocessor.Paymentprocessor/PerformRefund", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform Refund 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PerformRefundAsync(PaymentprocessorPerformRefundRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<Object> localVarResponse = await PerformRefundWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Refund 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<Object>> PerformRefundWithHttpInfoAsync(PaymentprocessorPerformRefundRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->PerformRefund");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.PerformRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/paymentprocessor.Paymentprocessor/PerformRefund", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UpdatePayment(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<Object> localVarResponse = UpdatePaymentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public paymentprocessor.Client.ApiResponse<Object> UpdatePaymentWithHttpInfo(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->UpdatePayment");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.UpdatePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/paymentprocessor.Paymentprocessor/UpdatePayment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdatePaymentAsync(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<Object> localVarResponse = await UpdatePaymentWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<Object>> UpdatePaymentWithHttpInfoAsync(PaymentprocessorUpdatePaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->UpdatePayment");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.UpdatePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/paymentprocessor.Paymentprocessor/UpdatePayment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorPaymentMethod</returns>
        public PaymentprocessorPaymentMethod UpdatePaymentMethod(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = UpdatePaymentMethodWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorPaymentMethod</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> UpdatePaymentMethodWithHttpInfo(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->UpdatePaymentMethod");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.UpdatePaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/UpdatePaymentMethod", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorPaymentMethod</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorPaymentMethod> UpdatePaymentMethodAsync(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod> localVarResponse = await UpdatePaymentMethodWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment Method 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorPaymentMethod)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorPaymentMethod>> UpdatePaymentMethodWithHttpInfoAsync(PaymentprocessorUpdatePaymentMethodRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->UpdatePaymentMethod");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.UpdatePaymentMethod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorPaymentMethod>("/paymentprocessor.Paymentprocessor/UpdatePaymentMethod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePaymentMethod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentprocessorVoidPaymentResponse</returns>
        public PaymentprocessorVoidPaymentResponse VoidPayment(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0)
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorVoidPaymentResponse> localVarResponse = VoidPaymentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Void Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentprocessorVoidPaymentResponse</returns>
        public paymentprocessor.Client.ApiResponse<PaymentprocessorVoidPaymentResponse> VoidPaymentWithHttpInfo(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->VoidPayment");
            }

            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.VoidPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentprocessorVoidPaymentResponse>("/paymentprocessor.Paymentprocessor/VoidPayment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentprocessorVoidPaymentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentprocessorVoidPaymentResponse> VoidPaymentAsync(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            paymentprocessor.Client.ApiResponse<PaymentprocessorVoidPaymentResponse> localVarResponse = await VoidPaymentWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Void Payment 
        /// </summary>
        /// <exception cref="paymentprocessor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentprocessorVoidPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<paymentprocessor.Client.ApiResponse<PaymentprocessorVoidPaymentResponse>> VoidPaymentWithHttpInfoAsync(PaymentprocessorVoidPaymentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new paymentprocessor.Client.ApiException(400, "Missing required parameter 'body' when calling PaymentprocessorApi->VoidPayment");
            }


            paymentprocessor.Client.RequestOptions localVarRequestOptions = new paymentprocessor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = paymentprocessor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = paymentprocessor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PaymentprocessorApi.VoidPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentprocessorVoidPaymentResponse>("/paymentprocessor.Paymentprocessor/VoidPayment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
