/*
 * Payment Processor Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = paymentprocessor.Client.OpenAPIDateConverter;

namespace paymentprocessor.Model
{
    /// <summary>
    /// PaymentprocessorPaymentMethodRestrictionCondition
    /// </summary>
    [DataContract(Name = "paymentprocessorPaymentMethodRestrictionCondition")]
    public partial class PaymentprocessorPaymentMethodRestrictionCondition : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ConditionAction? Action { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public PaymentMethodRestrictionConditionCondition? Condition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorPaymentMethodRestrictionCondition" /> class.
        /// </summary>
        /// <param name="contextPath">contextPath.</param>
        /// <param name="action">action.</param>
        /// <param name="condition">condition.</param>
        /// <param name="values">values.</param>
        public PaymentprocessorPaymentMethodRestrictionCondition(string contextPath = default(string), ConditionAction? action = default(ConditionAction?), PaymentMethodRestrictionConditionCondition? condition = default(PaymentMethodRestrictionConditionCondition?), List<string> values = default(List<string>))
        {
            this.ContextPath = contextPath;
            this.Action = action;
            this.Condition = condition;
            this.Values = values;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ContextPath
        /// </summary>
        [DataMember(Name = "contextPath", EmitDefaultValue = false)]
        public string ContextPath { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentprocessorPaymentMethodRestrictionCondition {\n");
            sb.Append("  ContextPath: ").Append(ContextPath).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
