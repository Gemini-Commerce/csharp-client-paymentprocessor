/*
 * Payment Processor Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = paymentprocessor.Client.OpenAPIDateConverter;

namespace paymentprocessor.Model
{
    /// <summary>
    /// PaymentprocessorPerformRefundRequest
    /// </summary>
    [DataContract(Name = "paymentprocessorPerformRefundRequest")]
    public partial class PaymentprocessorPerformRefundRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public PaymentprocessorCurrency? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorPerformRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentprocessorPerformRefundRequest()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentprocessorPerformRefundRequest" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId (required).</param>
        /// <param name="refundId">refundId (required).</param>
        /// <param name="payment">payment (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="currency">currency.</param>
        public PaymentprocessorPerformRefundRequest(string tenantId = default(string), string refundId = default(string), PaymentprocessorPayment payment = default(PaymentprocessorPayment), PaymentprocessorMoney amount = default(PaymentprocessorMoney), PaymentprocessorCurrency? currency = default(PaymentprocessorCurrency?))
        {
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new ArgumentNullException("tenantId is a required property for PaymentprocessorPerformRefundRequest and cannot be null");
            }
            this.TenantId = tenantId;
            // to ensure "refundId" is required (not null)
            if (refundId == null)
            {
                throw new ArgumentNullException("refundId is a required property for PaymentprocessorPerformRefundRequest and cannot be null");
            }
            this.RefundId = refundId;
            // to ensure "payment" is required (not null)
            if (payment == null)
            {
                throw new ArgumentNullException("payment is a required property for PaymentprocessorPerformRefundRequest and cannot be null");
            }
            this.Payment = payment;
            this.Amount = amount;
            this.Currency = currency;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", IsRequired = true, EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets RefundId
        /// </summary>
        [DataMember(Name = "refundId", IsRequired = true, EmitDefaultValue = true)]
        public string RefundId { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name = "payment", IsRequired = true, EmitDefaultValue = true)]
        public PaymentprocessorPayment Payment { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public PaymentprocessorMoney Amount { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentprocessorPerformRefundRequest {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  RefundId: ").Append(RefundId).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
