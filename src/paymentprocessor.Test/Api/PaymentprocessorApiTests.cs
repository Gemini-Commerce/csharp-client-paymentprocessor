/*
 * Payment Processor Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using paymentprocessor.Client;
using paymentprocessor.Api;
// uncomment below to import models
//using paymentprocessor.Model;

namespace paymentprocessor.Test.Api
{
    /// <summary>
    ///  Class for testing PaymentprocessorApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PaymentprocessorApiTests : IDisposable
    {
        private PaymentprocessorApi instance;

        public PaymentprocessorApiTests()
        {
            instance = new PaymentprocessorApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PaymentprocessorApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PaymentprocessorApi
            //Assert.IsType<PaymentprocessorApi>(instance);
        }

        /// <summary>
        /// Test AuthorizePayment
        /// </summary>
        [Fact]
        public void AuthorizePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorAuthorizePaymentRequest body = null;
            //var response = instance.AuthorizePayment(body);
            //Assert.IsType<PaymentprocessorAuthorizePaymentResponse>(response);
        }

        /// <summary>
        /// Test CreatePaymentMethod
        /// </summary>
        [Fact]
        public void CreatePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorCreatePaymentMethodRequest body = null;
            //var response = instance.CreatePaymentMethod(body);
            //Assert.IsType<PaymentprocessorPaymentMethod>(response);
        }

        /// <summary>
        /// Test FinalizePayment
        /// </summary>
        [Fact]
        public void FinalizePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorFinalizePaymentRequest body = null;
            //var response = instance.FinalizePayment(body);
            //Assert.IsType<PaymentprocessorFinalizePaymentResponse>(response);
        }

        /// <summary>
        /// Test GetAvailablePaymentMethod
        /// </summary>
        [Fact]
        public void GetAvailablePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorGetAvailablePaymentMethodRequest body = null;
            //var response = instance.GetAvailablePaymentMethod(body);
            //Assert.IsType<PaymentprocessorPaymentMethod>(response);
        }

        /// <summary>
        /// Test GetPaymentMethod
        /// </summary>
        [Fact]
        public void GetPaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorGetPaymentMethodRequest body = null;
            //var response = instance.GetPaymentMethod(body);
            //Assert.IsType<PaymentprocessorPaymentMethod>(response);
        }

        /// <summary>
        /// Test GetPaymentMethodConfiguration
        /// </summary>
        [Fact]
        public void GetPaymentMethodConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorGetPaymentMethodConfigurationRequest body = null;
            //var response = instance.GetPaymentMethodConfiguration(body);
            //Assert.IsType<PaymentprocessorGetPaymentMethodConfigurationResponse>(response);
        }

        /// <summary>
        /// Test InitPayment
        /// </summary>
        [Fact]
        public void InitPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorInitPaymentRequest body = null;
            //var response = instance.InitPayment(body);
            //Assert.IsType<PaymentprocessorInitPaymentResponse>(response);
        }

        /// <summary>
        /// Test ListAvailablePaymentMethods
        /// </summary>
        [Fact]
        public void ListAvailablePaymentMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorListAvailablePaymentMethodsRequest body = null;
            //var response = instance.ListAvailablePaymentMethods(body);
            //Assert.IsType<PaymentprocessorListAvailablePaymentMethodsResponse>(response);
        }

        /// <summary>
        /// Test ListPaymentMethods
        /// </summary>
        [Fact]
        public void ListPaymentMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorListPaymentMethodsRequest body = null;
            //var response = instance.ListPaymentMethods(body);
            //Assert.IsType<PaymentprocessorListPaymentMethodsResponse>(response);
        }

        /// <summary>
        /// Test PerformPayment
        /// </summary>
        [Fact]
        public void PerformPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorPerformPaymentRequest body = null;
            //var response = instance.PerformPayment(body);
            //Assert.IsType<PaymentprocessorPerformPaymentResponse>(response);
        }

        /// <summary>
        /// Test PerformRefund
        /// </summary>
        [Fact]
        public void PerformRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorPerformRefundRequest body = null;
            //var response = instance.PerformRefund(body);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UpdatePayment
        /// </summary>
        [Fact]
        public void UpdatePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorUpdatePaymentRequest body = null;
            //var response = instance.UpdatePayment(body);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test UpdatePaymentMethod
        /// </summary>
        [Fact]
        public void UpdatePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorUpdatePaymentMethodRequest body = null;
            //var response = instance.UpdatePaymentMethod(body);
            //Assert.IsType<PaymentprocessorPaymentMethod>(response);
        }

        /// <summary>
        /// Test VoidPayment
        /// </summary>
        [Fact]
        public void VoidPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaymentprocessorVoidPaymentRequest body = null;
            //var response = instance.VoidPayment(body);
            //Assert.IsType<PaymentprocessorVoidPaymentResponse>(response);
        }
    }
}
